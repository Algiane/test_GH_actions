name: Repro

on:
  pull_request:

  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      job:
        # job to trigger
        description: 'job to trigger'
        # Default value if no value is explicitly provided
        options:
        -check_pull_request_is_not_a_draft
        -check_pull_request_is_assigned
        -linux_builds
        -cuda_builds_mere_ready

        required: true

# job
jobs:
  check_pull_request_is_not_a_draft:
    runs-on: ubuntu-22.04
    steps:
    - name: Check that the PR is not a draft (cancel rest of jobs otherwise)
      run: |
        draft_status=$(curl -H "Accept: application/vnd.github+json" \
           https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }} \
           | jq '.draft')
        echo "Is PR a draft? (Check PR's draft status )"
        echo $draft_status
        if [[ $draft_status == false ]]; then "true" ; else "false"; fi

  # PR must be assigned to be merged.
  # This job will fail if this is not the case.
  check_pull_request_is_assigned:
    needs: [check_pull_request_is_not_a_draft]
    runs-on: ubuntu-22.04
    steps:
    # Assignee ID will be null if PR is not assigned
    - name: Check that the PR is assigned
      run: |
        id=$(curl -H "Accept: application/vnd.github+json" \
           https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }} \
           | jq '.assignee.id')
        echo "Is PR Assigned? (Check for Assignee ID)"
        echo $id
        if [[ $id != null ]]; then "true" ; else "false"; fi

  # PR must be labeled "ready to be merged" to run CUDA jobs.
  # This job will fail if this is not the case.
  # Note: Label should only be added if PR is in merge queue.
  check_ready_to_be_merged:
    needs: [check_pull_request_is_not_a_draft]
    runs-on: ubuntu-22.04
    steps:
    - name: Check that the PR is ready to be merged
      run: |
        labels=$(curl -H "Accept: application/vnd.github+json" \
           https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }} \
           | jq '.labels')
        ready_label="ready to be merged"
        echo "Is PR Ready to be Merged? (Check for $ready_label label)"
        echo "Labels found are: $labels"
        if [[ $labels == *"$ready_label"* ]]; then "true" ; else "false"; fi


  linux_builds:
    name: ${{ matrix.name }}
    needs: [check_pull_request_is_not_a_draft]
    strategy:

      # In-progress jobs will not be cancelled if there is a failure
      fail-fast : false
      matrix:
        include:
          - name: Ubuntu-20
            os: ubuntu-20.04

          - name: Ubuntu-22
            os: ubuntu-22.04

    runs-on: ${{ matrix.os }}
    steps:
    - name: Trigger linux build
      run: |
        echo "CPU job ${{ matrix.os }}"

  # CUDA jobs should only be run if PR is ready to merge.
  cuda_builds_merge_ready:
    name: ${{ matrix.name }}
    needs:
    - check_pull_request_is_not_a_draft
    - check_ready_to_be_merged
    strategy:

      # In-progress jobs will not be cancelled if there is a failure
      fail-fast : false
      matrix:
        include:
          - name: Ubuntu-20
            os: ubuntu-20.04

          - name: Ubuntu-22
            os: ubuntu-22.04
            
    runs-on: ${{ matrix.os }}
    steps:
    - name: Trigger linux build
      run: |
        echo "GPU job ${{ matrix.os }}"

  check_that_all_jobs_succeeded:
    runs-on: ubuntu-22.04
    needs:
    - check_pull_request_is_not_a_draft
    - check_pull_request_is_assigned
    - check_ready_to_be_merged
    - linux_builds
    - cuda_builds_merge_ready
    if: ${{ always() }}
    env:
      RETURN_VAL: |
        ${{
        needs.check_pull_request_is_not_a_draft.result == 'success' &&
        needs.check_pull_request_is_assigned.result == 'success' &&
        needs.linux_builds.result == 'success' &&
        needs.cuda_builds_merge_ready.result == 'success'
        }}
    steps:
    - name: PR Success
      if: ${{ contains(env.RETURN_VAL, 'true') }}
      run: "true"
    - name: PR Failure
      if: ${{ contains(env.RETURN_VAL, 'false') }}
      run: "false"
