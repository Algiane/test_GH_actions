name: GitHub CI

on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      branch:
        # branch to test
        description: 'branch to test'
        # Default value if no value is explicitly provided
        default: 'main'
        required: false

env:
  TOTO: "plop"

jobs:
  ci:
    runs-on: ${{ matrix.os }}

    # Launch a matrix of jobs
    strategy:
        matrix:
          os: [ubuntu-20.04,windows-2022,macos-10.15]
          pattern: [on,off]
          #scotch: [on,off]


    steps:
      # checkout the provided branch name if workflow is manually run
      - uses: actions/checkout@v2
        if: github.event_name == 'workflow_dispatch'
        with:
          ref: ${{github.event.inputs.branch}}

      # checkout the event branch for automatic workflows
      - uses: actions/checkout@v2
        if: github.event_name != 'workflow_dispatch'

      - name: RunnerWin PatternOff
        if: matrix.pattern == 'off' && matrix.os == 'windows-2022'
        run: |
          echo " RunnerWin $RUNNER_OS PatternOff: $TOTO"

      - name: Runner All
        run: |
          echo " Runner $RUNNER_OS : $TOTO"

      - name: Set and print options and env variables
        run: |
          echo "${{ github.event.inputs.name }}:
            Os:      ${{ matrix.os }},
            Pattern: ${{ matrix.pattern }}"

          if [ "$RUNNER_OS" == "macOS" ]; then
             echo "FORT_FLAG=\"-DCMAKE_Fortran_COMPILER=gfortran-11\"" >> "$GITHUB_ENV"
             echo "BUILD_CMD=make -j $NJOBS" >> "$GITHUB_ENV"
          elif [ "$RUNNER_OS" == "Linux" ]; then
             echo "FORT_FLAG=\"-DCMAKE_Fortran_COMPILER=gfortran-9\"" >> "$GITHUB_ENV"
             echo "BUILD_CMD=make -j $NJOBS" >> "$GITHUB_ENV"
          else
             echo "BUILD_CMD=cmake --build . --config Release" >> "$GITHUB_ENV"
             echo "TEST_CMD=-C Release" >> "$GITHUB_ENV"
          fi
          echo "CFG_FLAG=\"-DCI_CONTEXT=ON \\
          -DBUILD_TESTING=ON \\
          -DCMAKE_BUILD_TYPE=\$\{\{matrix.build\}\} \\
          -DPATTERN=\$\{\{matrix.pattern\}\} \\
          -DUSE_SCOTCH=\$\{\{matrix.scotch\}\} \\
          -DUSE_VTK=\$\{\{matrix.vtk\}\} \\
          -DTEST_LIBMMG=ON \\
          -DTEST_LIBMMGS=ON \\
          -DTEST_LIBMMG2D=ON \\
          -DTEST_LIBMMG3D=ON ..\"" >> "$GITHUB_ENV"

          echo "Environment variables:
            FORT_FLAG: ${{env.FORT_FLAG}}
            CFG_FLAG:  ${{env.CFG_FLAG }}
            BUILD_CMD: ${{env.BUILD_CMD}}
            TEST_CMD:  ${{env.TEST_CMD}} "

            # Remark: previous print fail, we have to make the print after var filling
        env:
          NJOBS: "2"

        shell: bash

      - name: Print env var outside context
        run: |
          echo "Environment variables:
            FORT_FLAG: ${{env.FORT_FLAG}}
            CFG_FLAG:  ${{env.CFG_FLAG }}
            BUILD_CMD: ${{env.BUILD_CMD}}
            TEST_CMD:  ${{env.TEST_CMD}} "
