name: GitHub CI

on:
  push:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      branch:
        # branch to test
        description: 'branch to test'
        # Default value if no value is explicitly provided
        default: 'main'
        required: false

env:
  TOTO: "plop"

jobs:
  ci:
    runs-on: ${{ matrix.os }}

    # Launch a matrix of jobs
    strategy:
        matrix:
          os: [self-hosted]
          #pattern: [on,off]


    steps:
      # checkout the provided branch name if workflow is manually run
      - uses: actions/checkout@v2
        if: github.event_name == 'workflow_dispatch'
        with:
          ref: ${{github.event.inputs.branch}}

      # checkout the event branch for automatic workflows
      - uses: actions/checkout@v2
        if: github.event_name != 'workflow_dispatch'

      # Following authentication to dockerhub using login-action doesn't work in run-on-arch-action as we setup a new docker install inside a container
      #- name: Login to DockerHub
      #  uses: docker/login-action@v2
      #  with:
      #    username: ${{ secrets.DOCKER_USERNAME }}
      #    password: ${{ secrets.DOCKER_PASSWORD }}


      - name: pull and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} --password  ${{ secrets.DOCKER_PASSWORD }}
          docker pull ubuntu:20.04
          docker tag  ubuntu:20.04  7g8efcehpff/pangea3-almalinux8-gcc9.4-openmpi4.1.2-cuda11.5.0-openblas0.3.18:ci
          docker push 7g8efcehpff/pangea3-almalinux8-gcc9.4-openmpi4.1.2-cuda11.5.0-openblas0.3.18:ci
        env:
          TOTO: toto
          TITI: titi

      # name: pull and push with run on arch
      # uses: uraimo/run-on-arch-action@v2
      # with:
      #   arch: ppc64le
      #   distro: ubuntu20.04
      #
      #   # Not required, but speeds up builds
      #   githubToken: ${{ github.token}}
      #
      #   install: |
      #     echo "-- Step 1: Install Docker on host ppc64le image "
      #     apt -qq update
      #     DEBIAN_FRONTEND="noninteractive" TZ="Europe/Paris" apt -qq install -y apt-transport-https ca-certificates curl software-properties-common gnupg
      #     install -m 0755 -d /etc/apt/keyrings
      #     curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      #     chmod a+r /etc/apt/keyrings/docker.gpg
      #     echo \
      #     "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      #      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
      #      tee /etc/apt/sources.list.d/docker.list > /dev/null
      #     apt-get -qq update
      #     apt-get -qq install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin
      #     echo "-- Step 2: Build TPLs on pangea reproduction "
      #
      #   run: |
      #     docker pull ubuntu:20.04
      #     docker tag  ubuntu:20.04  7g8efcehpff/pangea3-almalinux8-gcc9.4-openmpi4.1.2-cuda11.5.0-openblas0.3.18:ci-run-on-arch
      #     docker login -u  ${{ secrets.DOCKER_USERNAME }}
      #     docker push 7g8efcehpff/pangea3-almalinux8-gcc9.4-openmpi4.1.2-cuda11.5.0-openblas0.3.18:ci-run-on-arch
      #     docker logout

      - name: Print env var outside context
        run: |
          echo "Environment variables:
            FORT_FLAG: ${{env.FORT_FLAG}}
            CFG_FLAG:  ${{env.CFG_FLAG }}
            BUILD_CMD: ${{env.BUILD_CMD}}
            TEST_CMD:  ${{env.TEST_CMD}} "
